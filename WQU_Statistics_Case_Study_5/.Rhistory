# Require the Quantmod package
require(quantmod)
# Get the 1 Year S&P500 Data
snp_index <- getSymbols(Symbols = "^GSPC",
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
retrun.class = "xts")
View(GSPC)
# Require the Quantmod package
require(quantmod)
# Get the 1 Year S&P500 Data
snp_index <- getSymbols(Symbols = "^GSPC",
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
retrun.class = "xts")
# Get 10 of the component tickers
snp_tickers <- c("ADBE", "AAPL", "BAC", "BLK", "JPM",
"GS", "MS", "GOOG", "MSFT", "ADSK")
# Get the data for the 10 components
snp_composite <- getSymbols(Symbols = snp_tickers,
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
return.class = "xts")
View(GS)
snp_daily_returns <- dailyReturn(Ad(GSPC))
View(snp_daily_returns)
snp_daily_returns <- dailyReturn(GSPC)
View(snp_daily_returns)
View(GSPC)
snp_daily_returns <- dailyReturn(Ad(GSPC))
snp_daily_returns <- dailyReturn(GSPC)
snp_daily_returns <- dailyReturn(Ad(GSPC))
snp_daily_returns <- dailyReturn(GSPC)
View(snp_daily_returns)
for(i in 1:length(snp_tickers)) {
assign(paste(snp_tickers[i], "_daily_snp_component", sep=""),
dailyReturn(eval(as.name(snp_tickers[i]))))
}
View(GOOG_daily_snp_component)
length(AAPL)
length(AAPL_daily_snp_component)
View(AAPL_daily_snp_component)
View(AAPL_daily_snp_component)
# Require the Quantmod package
require(quantmod)
# Get the 1 Year S&P500 Data
print('Get 1 Year Data for S&P500')
snp_index <- getSymbols(Symbols = "^GSPC",
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
retrun.class = "xts")
# Get 10 of the component tickers
print('Get 1 Year Data for 10 of the componets of S&P500')
snp_tickers <- c("ADBE", "AAPL", "BAC", "BLK", "JPM",
"GS", "MS", "GOOG", "MSFT", "ADSK")
# Get the data for the 10 components
snp_composite <- getSymbols(Symbols = snp_tickers,
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
return.class = "xts")
# Calculate the daily returns of SnP500
print('Get 1 Year Data for S&P500')
snp_daily_returns <- dailyReturn(GSPC)
# Calculate the daily returns of 10 of it's constituents
for(i in 1:length(snp_tickers)) {
assign(paste(snp_tickers[i], "_daily_snp_component", sep=""),
dailyReturn(eval(as.name(snp_tickers[i]))))
}
View(AAPL_daily_snp_component)
length(AAPL_daily_snp_component)
length(AAPL)
View(AAPL)
View(AAPL)
length(c(1,2,3,4,5))
?pt
calculate_hypothesis <- function(daily_return_of_stock) {
# Student's T Test --> (xbar - u0) / s / sqrt(n)
# u0 = 0, since mean daily stock is zero
# xbar is mean, s is sd of returns, n = degree's of freedom (the number of independent observations in the sample minus one)
u0 <- 0
xbar <- mean(daily_return_of_stock)
s <- sd(daily_return_of_stock)
n <- length(daily_return_of_stock)
t <- (xbar - u0) / (s / sqrt(n))
# Display T-Value
print(paste('T-Value for ', daily_return_of_stock, 'is ', t, sep=''))
# Calculation of p-value using t-value
p <- 2 * pt(-abs(t), df = n - 1, lower = FALSE)
print(paste('P-Value for ', daily_return_of_stock, 'is ', p, sep=''))
# Hypothesis Testing
print(paste('Null Hypothesis (h0): ', daily_return_of_stock, '\'s mean daily return is equal to 0 ',
'that is, u = 0', sep=''))
print(paste('Alternate Hypothesis (h1): ', daily_return_of_stock, '\'s mean daily return is not equal to 0 ',
'that is, u = 0', sep=''))
print('Test for H0')
alpha = 5/100 # 5% Alpha
if (p <= alpha) {
print(paste('Reject H0 for', daily_return_of_stock))
return (1)
} else {
print(paste('Accept H0 for', daily_return_of_stock))
return (0)
}
}
hypo_calc <-c(calculate_hypothesis(AAPL_daily_snp_component), calculate_hypothesis(ADBE_daily_snp_component), calculate_hypothesis(ADSK_daily_snp_component),
calculate_hypothesis(BAC_daily_snp_component), calculate_hypothesis(BLK_daily_snp_component), calculate_hypothesis(GOOG_daily_snp_component),
calculate_hypothesis(GS_daily_snp_component), calculate_hypothesis(snp_daily_returns), calculate_hypothesis(JPM_daily_snp_component),
calculate_hypothesis(MS_daily_snp_component), calculate_hypothesis(MSFT_daily_snp_component))
hypo_calc
as.name(GOOG_daily_snp_component)
as.name(GOOG)
as.character(GOOG)
(GOOG.name)
View(AAPL)
View(AAPL.Open)
# Require the Quantmod package
require(quantmod)
# Get the 1 Year S&P500 Data
print('Get 1 Year Data for S&P500')
snp_index <- getSymbols(Symbols = "^GSPC",
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
retrun.class = "xts")
# Get 10 of the component tickers
print('Get 1 Year Data for 10 of the componets of S&P500')
snp_tickers <- c("ADBE", "AAPL", "BAC", "BLK", "JPM",
"GS", "MS", "GOOG", "MSFT", "ADSK")
# Get the data for the 10 components
snp_composite <- getSymbols(Symbols = snp_tickers,
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
return.class = "xts")
# Calculate the daily returns of SnP500
print('Get 1 Year Data for S&P500')
snp_daily_returns <- dailyReturn(GSPC)
# Calculate the daily returns of 10 of it's constituents
for(i in 1:length(snp_tickers)) {
assign(paste(snp_tickers[i], "_daily_snp_component", sep=""),
dailyReturn(eval(as.name(snp_tickers[i]))))
}
# Null Hypothesis calculation for all the stocks
calculate_hypothesis <- function(daily_return_of_stock, name_of_stock) {
# Student's T Test --> (xbar - u0) / s / sqrt(n)
# u0 = 0, since mean daily stock is zero
# xbar is mean, s is sd of returns, n = degree's of freedom (the number of independent observations in the sample minus one)
u0 <- 0
xbar <- mean(daily_return_of_stock)
s <- sd(daily_return_of_stock)
n <- length(daily_return_of_stock)
t <- (xbar - u0) / (s / sqrt(n))
# Display T-Value
print(paste('T-Value for ', name_of_stock, 'is ', t, sep=''))
# Calculation of p-value using t-value
p <- 2 * pt(-abs(t), df = n - 1, lower = FALSE)
print(paste('P-Value for ', name_of_stock, 'is ', p, sep=''))
# Hypothesis Testing
print(paste('Null Hypothesis (h0): ', name_of_stock, '\'s mean daily return is equal to 0 ',
'that is, u = 0', sep=''))
print(paste('Alternate Hypothesis (h1): ', name_of_stock, '\'s mean daily return is not equal to 0 ',
'that is, u = 0', sep=''))
print('Test for H0')
alpha = 5/100 # 5% Alpha
if (p <= alpha) {
print(paste('Reject H0 for', name_of_stock))
return (1)
} else {
print(paste('Accept H0 for', name_of_stock))
return (0)
}
}
# Calc Hypo
hypo_calc <-c(calculate_hypothesis(AAPL_daily_snp_component, 'AAPL'), calculate_hypothesis(ADBE_daily_snp_component, 'ADBE'), calculate_hypothesis(ADSK_daily_snp_component, 'ADSK'),
calculate_hypothesis(BAC_daily_snp_component, 'BAC'), calculate_hypothesis(BLK_daily_snp_component, 'BLK'), calculate_hypothesis(GOOG_daily_snp_component, 'GOOG'),
calculate_hypothesis(GS_daily_snp_component, 'GS'), calculate_hypothesis(snp_daily_returns, 'SNP500'), calculate_hypothesis(JPM_daily_snp_component, 'JPM'),
calculate_hypothesis(MS_daily_snp_component, 'MS'), calculate_hypothesis(MSFT_daily_snp_component, 'MSFT'))
print('The number of stocks for which H0 was accepted')
print(paste(sum(hypo_calc)))
hypo_calc
# Require the Quantmod package
require(quantmod)
# Get the 1 Year S&P500 Data
print('Get 1 Year Data for S&P500')
snp_index <- getSymbols(Symbols = "^GSPC",
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
retrun.class = "xts")
# Get 10 of the component tickers
print('Get 1 Year Data for 10 of the componets of S&P500')
snp_tickers <- c("ADBE", "AAPL", "BAC", "BLK", "JPM",
"GS", "MS", "GOOG", "MSFT", "ADSK")
# Get the data for the 10 components
snp_composite <- getSymbols(Symbols = snp_tickers,
src = "yahoo",
from = "2016-03-31",
to = "2017-03-31",
return.class = "xts")
# Calculate the daily returns of SnP500
print('Get 1 Year Data for S&P500')
snp_daily_returns <- dailyReturn(GSPC)
# Calculate the daily returns of 10 of it's constituents
for(i in 1:length(snp_tickers)) {
assign(paste(snp_tickers[i], "_daily_snp_component", sep=""),
dailyReturn(eval(as.name(snp_tickers[i]))))
}
# Null Hypothesis calculation for all the stocks
calculate_hypothesis <- function(daily_return_of_stock, name_of_stock) {
# Student's T Test --> (xbar - u0) / s / sqrt(n)
# u0 = 0, since mean daily stock is zero
# xbar is mean, s is sd of returns, n = degree's of freedom (the number of independent observations in the sample minus one)
u0 <- 0
xbar <- mean(daily_return_of_stock)
s <- sd(daily_return_of_stock)
n <- length(daily_return_of_stock)
t <- (xbar - u0) / (s / sqrt(n))
# Display T-Value
print(paste('T-Value for ', name_of_stock, 'is ', t, sep=''))
# Calculation of p-value using t-value
p <- 2 * pt(-abs(t), df = n - 1, lower = FALSE)
print(paste('P-Value for ', name_of_stock, 'is ', p, sep=''))
# Hypothesis Testing
print(paste('Null Hypothesis (h0): ', name_of_stock, '\'s mean daily return is equal to 0 ',
'that is, u = 0', sep=''))
print(paste('Alternate Hypothesis (h1): ', name_of_stock, '\'s mean daily return is not equal to 0 ',
'that is, u = 0', sep=''))
print('Test for H0')
alpha = 5/100 # 5% Alpha
if (p <= alpha) {
print(paste('Reject H0 for', name_of_stock))
print('\n')
return (0)
} else {
print(paste('Accept H0 for', name_of_stock))
print('\n')
return (1)
}
}
# Calc Hypo
hypo_calc <-c(calculate_hypothesis(AAPL_daily_snp_component, 'AAPL'), calculate_hypothesis(ADBE_daily_snp_component, 'ADBE'), calculate_hypothesis(ADSK_daily_snp_component, 'ADSK'),
calculate_hypothesis(BAC_daily_snp_component, 'BAC'), calculate_hypothesis(BLK_daily_snp_component, 'BLK'), calculate_hypothesis(GOOG_daily_snp_component, 'GOOG'),
calculate_hypothesis(GS_daily_snp_component, 'GS'), calculate_hypothesis(snp_daily_returns, 'SNP500'), calculate_hypothesis(JPM_daily_snp_component, 'JPM'),
calculate_hypothesis(MS_daily_snp_component, 'MS'), calculate_hypothesis(MSFT_daily_snp_component, 'MSFT'))
print('The number of stocks for which H0 was accepted:')
print(paste(sum(hypo_calc)))
